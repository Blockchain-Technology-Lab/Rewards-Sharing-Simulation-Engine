{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cardano Pooling Simulator\u2019s Documentation This is the documentation for the Cardano Pooling Simulation Engine built by the University of Edinburgh's Blockchain Technology Lab. The source code is available on Github . Overview The simulation models the behaviour of stakeholders in a Proof-of-Stake system, i.e. the way they use their stake to engage with the protocol depending on the rewards they expect to receive. It focuses particularly on the way different stakeholders combine their resources and create stake pools (it assumes an on-chain pooling mechanism like the one in Cardano) and follows the dynamics of the system until it (potentially) reaches an equilibrium. The implementation is based on the Cardano blockchain, but can be generalized to systems that use similar reward sharing schemes (e.g. Nym ). The simulation engine can be used to play out different scenarios and better understand the relationship between the system's input (e.g. parameters of the reward scheme or initial stake distribution) and its convergence properties (does it converge to an equilibrium and if yes how quickly, how decentralized is the final allocation of stake to the different stakeholders, and so on). For details on how to install the engine and run simulations, see the Setup page; for a complete guide on how to customize the simulation, see the Configuration page; for a description of the different output files that a simulation produces, see the Output page, and for examples to get started with and draw inspiration from, see the Examples page. Contributions This is an open source project licensed under the terms of the Apache 2.0 license . Everyone is welcome to contribute to it by proposing or implementing their ideas. Example contributions include, but are not limited to, adding a new feature to the simulation engine (e.g. integration of exchange rates), improving the performance of the simulations, or creating a user-friendly interface for configuring and running simulations.","title":"Home"},{"location":"#cardano-pooling-simulators-documentation","text":"This is the documentation for the Cardano Pooling Simulation Engine built by the University of Edinburgh's Blockchain Technology Lab. The source code is available on Github .","title":"Cardano Pooling Simulator\u2019s Documentation"},{"location":"#overview","text":"The simulation models the behaviour of stakeholders in a Proof-of-Stake system, i.e. the way they use their stake to engage with the protocol depending on the rewards they expect to receive. It focuses particularly on the way different stakeholders combine their resources and create stake pools (it assumes an on-chain pooling mechanism like the one in Cardano) and follows the dynamics of the system until it (potentially) reaches an equilibrium. The implementation is based on the Cardano blockchain, but can be generalized to systems that use similar reward sharing schemes (e.g. Nym ). The simulation engine can be used to play out different scenarios and better understand the relationship between the system's input (e.g. parameters of the reward scheme or initial stake distribution) and its convergence properties (does it converge to an equilibrium and if yes how quickly, how decentralized is the final allocation of stake to the different stakeholders, and so on). For details on how to install the engine and run simulations, see the Setup page; for a complete guide on how to customize the simulation, see the Configuration page; for a description of the different output files that a simulation produces, see the Output page, and for examples to get started with and draw inspiration from, see the Examples page.","title":"Overview"},{"location":"#contributions","text":"This is an open source project licensed under the terms of the Apache 2.0 license . Everyone is welcome to contribute to it by proposing or implementing their ideas. Example contributions include, but are not limited to, adding a new feature to the simulation engine (e.g. integration of exchange rates), improving the performance of the simulations, or creating a user-friendly interface for configuring and running simulations.","title":"Contributions"},{"location":"configuration/","text":"Configuration The simulation engine is highly configurable. From the reward scheme parameters to be used to the output files to be generated, there are numerous variables that can vary from execution to execution. This customisation is performed using command-line arguments when running the main or batch-run script. We will go through all the available options here, but it's also possible to get an overview of the arguments and their default values by running the help command: python main.py --help python batch-run.py --help Command-line options Argument Description Accepted values Default value --n The number of stakeholders / agents in the simulation. Any natural number 1000 k The target number of pools of the system (reward sharing scheme parameter) Any natural number 100 --a0 Stake influence / Sybil resilience factor (reward sharing scheme parameter) Any non-negative real number 0.3","title":"Configuration"},{"location":"configuration/#configuration","text":"The simulation engine is highly configurable. From the reward scheme parameters to be used to the output files to be generated, there are numerous variables that can vary from execution to execution. This customisation is performed using command-line arguments when running the main or batch-run script. We will go through all the available options here, but it's also possible to get an overview of the arguments and their default values by running the help command: python main.py --help python batch-run.py --help","title":"Configuration"},{"location":"configuration/#command-line-options","text":"Argument Description Accepted values Default value --n The number of stakeholders / agents in the simulation. Any natural number 1000 k The target number of pools of the system (reward sharing scheme parameter) Any natural number 100 --a0 Stake influence / Sybil resilience factor (reward sharing scheme parameter) Any non-negative real number 0.3","title":"Command-line options"},{"location":"examples/","text":"Examples Single runs Batch runs Interactive browser session","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#single-runs","text":"","title":"Single runs"},{"location":"examples/#batch-runs","text":"","title":"Batch runs"},{"location":"examples/#interactive-browser-session","text":"","title":"Interactive browser session"},{"location":"output/","text":"Output Output from single runs Output from batch runs Output from interactive browser session","title":"Output"},{"location":"output/#output","text":"","title":"Output"},{"location":"output/#output-from-single-runs","text":"","title":"Output from single runs"},{"location":"output/#output-from-batch-runs","text":"","title":"Output from batch runs"},{"location":"output/#output-from-interactive-browser-session","text":"","title":"Output from interactive browser session"},{"location":"setup/","text":"Setup Dependencies The simulation engine is written in Python 3.9, so the first thing to ensure when running it on some machine is that Python 3.9 is installed there. The remaining dependencies of the project can be found in the requirements file . Running the following from the root directory of the project installs all required packages in one go (assuming that the python command corresponds to a Python 3.9 installation): python -m pip install -r requirements.txt Installation Installing the simulation engine is very simple, as it only involves cloning the relevant Github project : git clone https://github.com/Blockchain-Technology-Lab/Cardano-Pooling-Simulator.git Execution To run the simulation, navigate to the directory of the project and run the main.py script from a terminal: python main.py This executes the simulation with the default options (1000 agents, k = 100, a0 = 0.3, and so on). It is also possible to run the simulation with different parameters. For example, to if we want a simulation with 10,000 agents and target number of pools k = 500, we can run the following: python main.py --n=10000 --k=500 For the full list of options that the simulation accepts, refer to the Configuration page, and for examples of using the simulation engine in different ways see the Examples page.","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#dependencies","text":"The simulation engine is written in Python 3.9, so the first thing to ensure when running it on some machine is that Python 3.9 is installed there. The remaining dependencies of the project can be found in the requirements file . Running the following from the root directory of the project installs all required packages in one go (assuming that the python command corresponds to a Python 3.9 installation): python -m pip install -r requirements.txt","title":"Dependencies"},{"location":"setup/#installation","text":"Installing the simulation engine is very simple, as it only involves cloning the relevant Github project : git clone https://github.com/Blockchain-Technology-Lab/Cardano-Pooling-Simulator.git","title":"Installation"},{"location":"setup/#execution","text":"To run the simulation, navigate to the directory of the project and run the main.py script from a terminal: python main.py This executes the simulation with the default options (1000 agents, k = 100, a0 = 0.3, and so on). It is also possible to run the simulation with different parameters. For example, to if we want a simulation with 10,000 agents and target number of pools k = 500, we can run the following: python main.py --n=10000 --k=500 For the full list of options that the simulation accepts, refer to the Configuration page, and for examples of using the simulation engine in different ways see the Examples page.","title":"Execution"}]}